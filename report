


Mid term-Exam Report 
(CS-560)
								
							By: Vidhi Shah
							Student ID: 16178723














Index

	Question
	Design 
	Features Implemented 
	Integration algorithms 
	Predictive algorithms 
	Solr indexing: Your own data services 
	Software Services 
	Your own services 
	Existing services/APIs 
	Mobile User Interface 
	Your own design 
	Existing design 
	Outputs: description with screenshots of the Features 
	All the Web Service and Web Site URLs 
	Your midterm Github URL 
	Limitations 
	References









Question:
You have the freedom to choose, to make your own choices for your application domain, datasets, and big data analytics technologies (e.g., Cloudera/Solr/Mahout/R). 
1. Selection of datasets from at least two different domains (e.g., twitter and Youtube) 
2. Big data integration and aggregations models and algorithms 
3. Predictive/recommendation models and algorithms 
4. Mobile App/Web design  

1.)	Design:

Here, I am following the given below architecture:
Data is being stored in hadoop HDFS which is being converted in json form for storing them in solr. Solr is supporting full text search. So using that user can get the output related to their query. 

 
Data Model: 
I used two different file. One file is having information about item. Another file is having data related to item and brand. As both file is having one common parameter about item we can merge this file and we can retrieve data from the combination of both file.

Integration Model and algorithm:


                        File:1                                               File:2
Classifiers	Item data
Item data
Brand data
 

Classifier	Item data	Brand data

Predictive recommendation model and algorithm:

Here, user will enter classifier in terms of television, refrigerator and laptop they will get output about items according to that classifier.  I used mahout-naive-bayes algorithm for clustering the data. When we query this classifier, it will retrieve item number under classifier.  Using this item number, user can get recommendation about the brand of that item. 

Selection of datasets: 
I used datasets from existing website which is linked below:
http://grouplens.org/datasets/movielens/

Mobile App: 
I used Eclipse for developing my android mobile app using JAVA. 




2.)	Features implemented: 
In my project I have integrated two different dataset related to items and 50 different brands of item respectively. For user interfacing, I have developed   mobile application in eclipse. Here, when user inserts the classifier, user will be recommended few items and according to items, user will be recommended brand of that item. Basically, I have used mahout-naïve-bayes algorithm and item recommendation algorithm:
Software Services:

1.)	Web services : RESTful API
2.)	Programming languages : JAVA
3.)	Front end: Android
4.)	Hadoop distribution : Cloudera
5.)	Machine Learning tool : Mahout 
6.)	Searching tool : solr

Mobile user interface:
In this, in home page user will enter classifier from TV, laptop and refrigerator in text box. Then user will be given the item number from solr. There is one hyperlink to navigate to the next page. On that user has to enter item number and according to item number. User will be given recommended brands related to that item. 
3.)	Outputs:   

Mahout execution:

For data file:1
It is divided in two sets of file for training and testing on 40% and 60% data ratio.

Training data file:
After 8-9 iteration, I got accuracy of 91% on training data.
 
For testing data, I got accuracy of 97.129%  
 
Output from the classified data:
(I have attached text file of this) with report.


Conversion of txt to JSON:

class Txt2Json {

	public static void main(String args[]) {

		String txtfile = "homeapp_classify.txt";
		String jsonfile = "homeapp_classify.json";

		BufferedReader br = null;		
		String result = "";
		int count=0;
		try {
			String sCurrentLine;
			br = new BufferedReader(new FileReader(txtfile));

			FileWriter file = new FileWriter(jsonfile,true);

			file.write("[{");
 
			file.write("\"id\":\"desc\"");

			while ((sCurrentLine = br.readLine()) != null) {

				if(sCurrentLine.contains("\t")){
					String Array[] = sCurrentLine.split("\t");
					String id = Array[0];
					String desc = Array[1];
					String Array2[]=desc;		
					try {


		if(count>0&&count<=20)
				{
						file.write(",\"desc\":"+"\""+Array2[1]+"\"");	
			}
				if(count>20)
			{
				break;
					}

			} catch (IOException e) {

				e.printStackTrace();
		result = e.toString();
		}
								}
			count=count+1;
			}

			file.write("}]");
																																		file.flush();
		file.close();
																																								result  ="convert success";

																																												} catch (IOException e) {
																																														e.printStackTrace();
																																											result = e.toString();
																																										} finally {
																																										try {
																																											if (br != null)br.close();
																																										} catch (IOException ex) {
																																											ex.printStackTrace();
																																									result = ex.toString();
																																									}
}																																			}

																																				    				return result;


		}
}

 (I have attached JSON file with this Report)

Data in JSON format pushed to Solr:
When we query classifier in solr, it will retrieve item number. For Television I got the following: 
 
Solr URL:
http://localhost:8983/solr/collection3_shard1_replica1/select?q=*%3A%*22Laptop%22&wt=json&indent=true
http://localhost:8983/solr/collection3_shard1_replica1/select?q=*%3A%*22Refrigerator%22&wt=json&indent=true
http://localhost:8983/solr/collection3_shard1_replica1/select?q=*%3A%*22Television%22&wt=json&indent=true

Done with pulling data set :1  to solr.




Now, using dataset:2 file
For this file I am using Item Based Recommendation number.
pom file:
<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"><modelVersion>4.0.0</modelVersion><parent><artifactId>mahout</artifactId><groupId>org.apache.mahout</groupId><version>0.7</version><relativePath>../pom.xml</relativePath></parent><groupId>com.unresyst</groupId><artifactId>mahoutrec</artifactId><version>1.0-SNAPSHOT</version><packaging>jar</packaging><name>mahoutrec</name><url>http://maven.apache.org</url><properties><project.build.sourceEncoding>UTF-8</project.build.sourceEncoding></properties><dependencies><dependency><groupId>junit</groupId><artifactId>junit</artifactId><version>3.8.1</version><scope>test</scope></dependency><dependency><groupId>org.apache.mahout</groupId><artifactId>mahout-core</artifactId><version>0.7</version></dependency><dependency><groupId>org.apache.mahout</groupId><artifactId>mahout-math</artifactId><version>0.7</version></dependency><dependency><groupId>org.apache.mahout</groupId><artifactId>mahout-math</artifactId><version>0.7</version><type>test-jar</type><scope>test</scope></dependency><dependency><groupId>org.apache.mahout</groupId><artifactId>mahout-utils</artifactId><version>0.4</version></dependency></dependencies></project>
My algorithm coding:
package com.unresyst;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;
import java.io.IOException;

import org.apache.commons.cli2.OptionException; 
import org.apache.mahout.cf.taste.common.TasteException;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.recommender.CachingRecommender;
import org.apache.mahout.cf.taste.impl.recommender.slopeone.SlopeOneRecommender;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;

public class UnresystBoolRecommend {
    
    public static void main(String... args) throws FileNotFoundException, TasteException, IOException, OptionException {
        
       
 File ratingsFile = new File("datasets/item-user data.txt");                        
        DataModel model = new FileDataModel(ratingsFile);
        
       
 CachingRecommender cachingRecommender = new CachingRecommender(new SlopeOneRecommender(model));

       
 for (LongPrimitiveIterator it = model.getItemIDs();
 it.hasNext();)
{
            long userId = it.nextLong();
            
            List<RecommendedItem> recommendations = cachingRecommender.recommend(ItemId, 10);
            
                            
            // print the list of recommendations for each 
            for (RecommendedItem recommendedItem : recommendations) {
                System.out.print("Brand ");
                System.out.print(ItemId);
                System.out.print(": ");
                System.out.println(recommendedBrand);
            }
        }        
    }
} 
Screen shot of successful compilation and execution of itemid-brandname file:
 

Pushing data into solr as JSON format:
 


 

REST url returned from solr:
http://localhost:8983/solr/collection3_shard1_replica1/select?q=id:13&wt=json&indent=true

Java coding for Json parsing:

 


Java coding:
main activity page
package com.src.recommendationsystem;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import java.util.List;
import android.util.Log;


public class Main_activity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.brand_activity);
		
		

public class JSONParser {

    static InputStream httpResponseStream = null;
    static String jsonString = "";

    public JSONObject makeHttpRequest(String url, String method,
            List<NameValuePair> params) {

        try {
            DefaultHttpClient httpClient = new DefaultHttpClient();

            if (method == "POST") {
                HttpPost httpPost = new HttpPost(String urlString = "http://localhost:8983/solr/collection3_shard1_replica1";
SolrServer solr = new HttpSolrServer(urlString);

);
                httpPost.setEntity(new UrlEncodedFormEntity(params));
                HttpResponse httpResponse = httpClient.execute(httpPost);
                HttpEntity httpEntity = httpResponse.getEntity();
                httpResponseStream = httpEntity.getContent();
            }
            else if (method == "GET") {
                String paramString = URLEncodedUtils.format(params, "utf-8");
                url += "?" + paramString;
                HttpGet httpGet = new HttpGet("http://localhost:8983/solr/collection3_shard1_replica1");
                HttpResponse httpResponse = httpClient.execute(httpGet);
                HttpEntity httpEntity = httpResponse.getEntity();
                httpResponseStream = httpEntity.getContent();
            }
            else if (method == "GET") {
                String paramString = URLEncodedUtils.format(params, "utf-8");
                url += "?" + paramString;
                HttpGet httpGet = new HttpGet("http://localhost:8983/solr/collection3_shard1_replica1");
                HttpResponse httpResponse = httpClient.execute(httpGet);
                HttpEntity httpEntity = httpResponse.getEntity();
                httpResponseStream = httpEntity.getContent();
            }


        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            BufferedReader httpResponseReader = new BufferedReader(
                    new InputStreamReader(httpResponseStream, "iso-8859-1"), 8);
            String line = null;
            jsonString = "";
            while ((line = httpResponseReader.readLine()) != null) {
                jsonString += (line + "\n");
            }
            httpResponseStream.close();
        } catch (Exception e) {
            Log.e("Buffer Error", "Error converting result " + e.toString());
        }

        try {
            return new JSONObject(jsonString);
        } catch (JSONException e) {
            Log.e("JSON Parser", "Error parsing data " + e.toString());
            return null;
        }
    }
}	
	((Button) findViewById(R.id.btnLogin)).setOnClickListener(new View.OnClickListener() {
		
		@Override
		public void onClick(View v) {
		
			Intent i = new Intent(getApplicationContext(), BrandActivity.class);
			startActivity(i);
				});
	
	}

	}

Brand activity java:
public class Main_activity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.brand_activity);
		
		

public class JSONParser {

    static InputStream httpResponseStream = null;
    static String jsonString = "";

    public JSONObject makeHttpRequest(String url, String method,
            List<NameValuePair> params) {

        try {
            DefaultHttpClient httpClient = new DefaultHttpClient();

            if (method == "POST") {
                HttpPost httpPost = new HttpPost(String urlString = "http://localhost:8983/solr/collection3_shard1_replica1";
SolrServer solr = new HttpSolrServer(urlString);

);
                httpPost.setEntity(new UrlEncodedFormEntity(params));
                HttpResponse httpResponse = httpClient.execute(httpPost);
                HttpEntity httpEntity = httpResponse.getEntity();
                httpResponseStream = httpEntity.getContent();
            }

Recommendation system’s Home page where user will give classifier as and input and retrieve item number as an output :

 
Screenshot of emulator:
 

As soon as user click on the “click here” button, user will get the brand recommendation of that number and page will navigate onto another page:
 
Final Output:
 
 





Domain Model:

1.)	Data sources: 
http://mahout.apache.org/users/basics/collections.html     

2.)	Algorithm:  mahout-naïve-bayes and item based Recommendation

Software Services:

a.	Web services : RESTful API
b.	Programming languages : JAVA
c.	Front end: Android by ADT
d.	Hadoop distribution : Cloudera
e.	Machine Learning tool : Mahout
f.	Searching tool : solr


Your midterm Github URL: 
https://github.com/vidhishah123/Midterm

 Limitations: 
Only one limitation in my mobile app is, as in a readymade given dataset, integer is used, brand name is not in string but its integer number.  But, it is very easy to fetch string instead of integer. 

 Reference:
•	http://www.slideshare.net/Cataldo/apache-mahout-tutorial-recommendation-20132014 
•	http://mahout.apache.org/users/basics/collections.html     
•	https://blackboard.umkc.edu/webapps/portal/frameset.jsp?tab_tab_group_id=_241_1&url=%2Fwebapps%2Fblackboard%2Fexecute%2Flauncher%3Ftype%3DCourse%26id%3D_95483_1%26url%3D
•	https://lucene.apache.org/solr/4_7_1/tutorial.html
•	http://mahout.apache.org/users/basics/collections.html     


